/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // ram8개가 순차 나열 -> register로 따지면 8/8/8/8/8/8/8/8
    // 6자리 주소 (000000 ~ 111111) 중에 뒤에 3자리는 register를 고르는데 쓰임
    // 앞 3자리는 ram 칩을 고르는데 쓰임
    // address[3..5] -> select ram chip
    // 선택한 칩에만 load 넣어줘야됨
    DMux8Way(in=load, sel=address[3..5], a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);

    // address[0..2] -> select register inside ram
    RAM8(in=in, load=a, address=address[0..2], out=out1);
    RAM8(in=in, load=b, address=address[0..2], out=out2);
    RAM8(in=in, load=c, address=address[0..2], out=out3);
    RAM8(in=in, load=d, address=address[0..2], out=out4);
    RAM8(in=in, load=e, address=address[0..2], out=out5);
    RAM8(in=in, load=f, address=address[0..2], out=out6);
    RAM8(in=in, load=g, address=address[0..2], out=out7);
    RAM8(in=in, load=h, address=address[0..2], out=out8);

    Mux8Way16(a=out1, b=out2, c=out3, d=out4, e=out5, f=out6, g=out7, h=out8, sel=address[3..5], out=out);
}
