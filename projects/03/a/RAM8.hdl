/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // demux? in -> 8 way
    // a ~ h중 address인 값만 true (1)
    DMux8Way(in=load, sel=address, a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);

    // register에 위에서 얻은 a~h를 load에 넣어줌
    // address에 해당하는 값만 1이고 나머지는 0이기 때문에
    // 해당 레지스터만 값 변함
    Register(in=in, load=a, out=add000);
    Register(in=in, load=b, out=add001);
    Register(in=in, load=c, out=add010);
    Register(in=in, load=d, out=add011);
    Register(in=in, load=e, out=add100);
    Register(in=in, load=f, out=add101);
    Register(in=in, load=g, out=add110);
    Register(in=in, load=h, out=add111);
    // 다음 cycle부터 address 의 값에 따라 위 register 선택
    // register의 out은 이미 DFF에 따라 되기 때문에 그냥 out 시키면 됨
    Mux8Way16(a=add000, b=add001, c=add010, d=add011, e=add100, f=add101, g=add110, h=add111, sel=address, out=out);
}
